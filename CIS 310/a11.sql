--Question 1
Select Description, ListPrice
From Pet..Merchandise
Where ListPrice > (select avg(ListPrice)
				  from Pet..Merchandise)

--Question 2
Create view avgcost as 
select ItemId, Avg(Cost) AS COST
From Pet..OrderItem
Group By OrderItem.ItemID;

CREATE VIEW AVGSALE AS
SELECT ITEMID, AVG(SALEPRICE) AS SALEPRICE
FROM PET..SALEITEM
GROUP BY ITEMID

SELECT M.ItemID, M.Description,C.AvgofCost AS AVERAGEPURCHASECOST, S.SALEPRICE AS AVERAGESALEPRICE
FROM AVGCOST C INNER JOIN PET..MERCHANDISE M 
	ON C.ItemId = M.ItemID
	INNER JOIN AVGSALE S
	ON S.ItemID = M.ItemID
WHERE S.SALEPRICE > 1.5 * C.AvgofCost

--QUESTION 3
SELECT E.FIRSTNAME,E.LASTNAME, 
SUM(I.SALEPRICE * I.QUANTITY) / 
		(SELECT SUM(I.SALEPRICE * I.QUANTITY) 
		FROM PET..SALE S INNER JOIN PET..SALEITEM I
		ON I.SALEID = S.SALEID) AS [PERCENT OF SALES]

FROM PET..Employee E INNER JOIN PET..SALE S 
	ON E.EMPLOYEEID = S.EMPLOYEEID
	INNER JOIN PET..SALEITEM I 
	ON I.SALEID = S.SALEID
GROUP BY E.FirstName, E.LASTNAME

--QUESTION 4
CREATE VIEW TOTAL AS
SELECT PONUMBER, SUM(QUANTITY * COST) AS OTOTAL
FROM PET..ORDERITEM
GROUP BY PONUMBER

SELECT S.SUPPLIERID, S.NAME, AVG(M.SHIPPINGCOST/T.OTOTAL) AS [PERCENT OF SHIPPING]
FROM PET..Supplier S INNER JOIN PET..MerchandiseOrder M
	ON S.SupplierID = M.SupplierID
	INNER JOIN TOTAL T
	ON T.PONUMBER = M.PONumber
GROUP BY S.SUPPLIERID, S.NAME

--QUESTION 5
CREATE VIEW ANIMALINFO AS
SELECT S.CUSTOMERID, SUM(A.SALEPRICE) AS [ANIMAL SALE TOTAL]
FROM PET..SALE S INNER JOIN PET..SALEANIMAL A
	ON S.SALEID = A.SALEID
GROUP BY S.CUSTOMERID

CREATE VIEW MERCHANDISEINFO AS
SELECT S.CUSTOMERID, SUM(I.QUANTITY*I.SALEPRICE) AS [SALE TOTAL]
FROM PET..SALE S INNER JOIN PET..SALEITEM I
	ON S.SALEID = I.SALEID
GROUP BY S.CUSTOMERID


SELECT A.[ANIMAL SALE TOTAL], M.[SALE TOTAL], C.CUSTOMERID, SUM( A.[ANIMAL SALE TOTAL] + M.[SALE TOTAL]) AS [TOTAL SALE]
FROM ANIMALINFO A FULL OUTER JOIN PET..CUSTOMER C 
	ON A.CUSTOMERID = C.CUSTOMERID
	FULL OUTER JOIN MERCHANDISEINFO M 
	ON M.CustomerID = C.CUSTOMERID
GROUP BY C.CUSTOMERID, A.[ANIMAL SALE TOTAL], M.[SALE TOTAL], C.CustomerID

--QUESTION 6
SELECT S.CUSTOMERID, SUM(I.SALEPRICE * I.QUANTITY) AS MAY
FROM PET..SALE S INNER JOIN PET..SALEITEM I
	ON S.SALEID = I.SALEID
WHERE MONTH(S.SALEDATE) = 5
AND
S.CUSTOMERID IN 
		(SELECT S.CUSTOMERID
		FROM PET..SALE S INNER JOIN PET..SALEITEM I 
			ON S.SaleID = I.SALEID
		WHERE MONTH(S.SALEDATE) = 10
		GROUP BY S.CustomerID
		HAVING (SUM ( SALEPRICE * QUANTITY ) > 50))
GROUP BY S.CUSTOMERID
HAVING SUM(I.SALEPRICE * I.QUANTITY) > 100

--QUESTION 7

CREATE VIEW FOODPURCHASED AS
SELECT M.DESCRIPTION, SUM(I.QUANTITY) AS FOODBOUGHT
FROM PET..MERCHANDISE M INNER JOIN PET..ORDERITEM I
	ON M.ITEMID = I.ITEMID
	INNER JOIN PET..MERCHANDISEORDER R
	ON R.PONUMBER = I.PONUMBER
WHERE MONTH(R.OrderDate) BETWEEN 1 AND 7
GROUP BY M.Description
HAVING M.Description = '%Premium%'


CREATE VIEW FOODTHATSOLD AS
SELECT M.DESCRIPTION, SUM(I.QUANTITY) AS FOODSOLD
FROM PET..MERCHANDISE M INNER JOIN PET..SALEITEM I
	ON M.ITEMID = I.ITEMID
	INNER JOIN PET..SALE S
	ON S.SALEID = I.SALEID
WHERE MONTH(S.SALEDATE) BETWEEN 1 AND 7
GROUP BY M.Description
HAVING M.Description = '%Premium%'

SELECT P.DESCRIPTION AS [NAME OF ITEM], (FOODBOUGHT - FOODSOLD) AS [CHANGE IN FOOD STOCK]
FROM FOODPURCHASED P INNER JOIN FOODTHATSOLD S
	ON P.DESCRIPTION = S.DESCRIPTION

--QUESTION 8
SELECT M.DESCRIPTION
FROM PET..MERCHANDISE M INNER JOIN PET..SALEITEM I 
	ON M.ItemID = I.ITEMID
	INNER JOIN PET..SALE S
	ON I.SALEID = S.SaleID
WHERE I.SalePrice > 50 
		AND
	  MONTH(S.SALEDATE) = 7

--QUESTION 9
SELECT DISTINCT M.ITEMID, M.DESCRIPTION, M.QUANTITYONHAND
FROM PET..MERCHANDISE M RIGHT JOIN PET..ORDERITEM O
	ON M.ITEMID = O.ITEMID
	RIGHT JOIN PET..SALEITEM I 
	ON I.ITEMID = M.ITEMID
	RIGHT JOIN PET..SALE S
	ON S.SALEID =I.SALEID
WHERE M.QUANTITYONHAND > 100 AND YEAR(S.SALEDATE) <> 2004

--QUESTION 10
CREATE TABLE CATEGORYS
(CATEGORY CHAR(4) ,LOW INT,HIGH INT)

INSERT INTO CATEGORYS VALUES('WEAK',0,200)
INSERT INTO CATEGORYS VALUES('GOOD',200,800)
INSERT INTO CATEGORYS VALUES('BEST',800,10000)

--QUESTION 11
CREATE VIEW TOTALSPENT AS
SELECT C.CUSTOMERID,C.LASTNAME,C.FIRSTNAME, SUM(A.[ANIMAL SALE TOTAL] + M.[SALE TOTAL]) AS GRANDTOTAL
FROM ANIMALINFO A FULL OUTER JOIN PET..CUSTOMER C 
	ON A.CUSTOMERID = C.CUSTOMERID
	FULL OUTER JOIN MERCHANDISEINFO M
	ON M.CUSTOMERID = C.CUSTOMERID
	GROUP BY C.CUSTOMERID,C.LASTNAME, C.FIRSTNAME

SELECT DISTINCT T.CUSTOMERID,T.FIRSTNAME, T.LASTNAME, T.GRANDTOTAL,C.CATEGORY
FROM CATEGORYS C INNER JOIN TOTALSPENT T
	ON T.GRANDTOTAL <= C.HIGH AND T.GRANDTOTAL > C.LOW


--QUESTION 12
SELECT DISTINCT S.NAME, 'SOLD MERCHANDISE'
FROM PET..SUPPLIER S INNER JOIN PET..MERCHANDISEORDER M 
	ON M.SUPPLIERID = S.SUPPLIERID
WHERE MONTH(M.ORDERDATE) = 6
UNION
SELECT DISTINCT S.NAME, 'SOLD ANIMALS'
FROM PET..SUPPLIER S INNER JOIN PET.. ANIMALORDER A 
	ON S.SupplierID = A.SUPPLIERID
WHERE MONTH(A.ORDERDATE)= 6

--DIDNT KNOW IF WE WERE SUPPOSED TO USE UNION BUT I FOUND IT AS AN OPTION ONLINE